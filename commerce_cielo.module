<?php

/**
 * @file
 * Implements Cielo's payment web service for use with Drupal Commerce.
 */

/**
 * Authentication Type.
 *
 * Authentication Only.
 */
define('COMMERCE_CIELO_AUTHENTICATION_ONLY', 0);

/**
 * Authentication Type.
 *
 * Authorize Only If Athenticated.
 */
define('COMMERCE_CIELO_AUTHORIZE_ONLY_IF_AUTHENTICATED', 1);

/**
 * Authentication Type.
 *
 * Authorize Either Authenticated Or Not.
 */
define('COMMERCE_CIELO_AUTHORIZE_EITHER_AUTHENTICATED_OR_NOT', 2);

/**
 * Authentication Type.
 *
 * Skip Authentication And Go Straight To Authorization.
 */
define('COMMERCE_CIELO_SKIP_AUTHENTICATION', 3);

/**
 * Used for installment payment terms.
 *
 * A 3rd party (finantial institution) is the credit provider.
 */
define('COMMERCE_CIELO_CREDITOR_ISSUER', 3);

/**
 * Used for installment payment terms.
 *
 * The merchant is the credit provider.
 */
define('COMMERCE_CIELO_CREDITOR_MERCHANT', 2);

/**
 * Defines the Cielo's languange interface.
 *
 * Portuguese.
 */
define('COMMERCE_CIELO_LANG_PT', 'PT');

/**
 * Defines the Cielo's languange interface.
 *
 * Spanish.
 */
define('COMMERCE_CIELO_LANG_ES', 'ES');

/**
 * Defines the Cielo's languange interface.
 *
 * English.
 */
define('COMMERCE_CIELO_LANG_EN', 'EN');

/**
 * Defines the Card Mode, either Credit or Debit.
 *
 * Debit.
 */
define('COMMERCE_CIELO_CARD_DEBIT', 'A');

/**
 * Defines the Card Mode, either Credit or Debit.
 *
 * Credit.
 */
define('COMMERCE_CIELO_CARD_CREDIT', 1);

/**
 * Defines the Card Flag.
 *
 * Master Card.
 */
define('COMMERCE_CIELO_FLAG_MASTERCARD', 'mastercard');

/**
 * Defines the Card Flag.
 *
 * Visa.
 */
define('COMMERCE_CIELO_FLAG_VISA', 'visa');

/**
 * Defines the Card Flag.
 *
 * Elo.
 */
define('COMMERCE_CIELO_FLAG_ELO', 'elo');


/**
 * Defines the Remote Status of the Transaction.
 *
 */
define('COMMERCE_CIELO_TRANSACTION_CREATED', 0);

/**
 * Defines the Remote Status of the Transaction.
 *
 */
define('COMMERCE_CIELO_IN_PROGRESS', 1);


/**
 * Defines the Remote Status of the Transaction.
 *
 */
define('COMMERCE_CIELO_AUTHENTICATED', 2);

/**
 * Defines the Remote Status of the Transaction.
 */
define('COMMERCE_CIELO_NOT_AUTHENTICATED', 3);

/**
 * Defines the Remote Status of the Transaction.
 *
 * Authorized or still to be captured.
 */
define('COMMERCE_CIELO_AUTHORIZED', 4);

/**
 * Defines the Remote Status of the Transaction.
 */
define('COMMERCE_CIELO_BEING_AUTHENTICATED', 10);

/**
 * Defines the Remote Status of the Transaction.
 *
 * Success.
 */
define('COMMERCE_CIELO_CAPTURED', 6);

/**
 * Defines the Remote Status of the Transaction.
 *
 * Failure.
 */
define('COMMERCE_CIELO_AUTHORIZATION_DENIED', 5);

/**
 * Defines the Remote Status of the Transaction.
 *
 * Failure.
 */
define('COMMERCE_CIELO_NOT_CAPTURED', 8);

/**
 * Defines the Remote Status of the Transaction.
 */
define('COMMERCE_CIELO_VOIDED', 9);

/**
 * Determines access to the prior authorization capture form for Cielo Payment Method.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be captured.
 *
 * @return
 *   TRUE or FALSE indicating capture access.
 */
function commerce_cielo_capture_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Cielo or isn't
  // Awaiting capture.
  if ($transaction->payment_method != 'cielo' || $transaction->remote_status != 'authorization_only') {
    return FALSE;
  }

  // Return FALSE if it is more than 5 days past the original authorization.
  if (time() - $transaction->created > 86400 * 5) {
    return FALSE;
  }

  // Allow access if the user can update payments on this order.
  return commerce_payment_transaction_access('update', $order, $transaction);
}


/**
 * Determines access to the payment cancelation form for Cielo Payment Method.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be voided.
 *
 * @return
 *   TRUE or FALSE indicating voiding access.
 */
function commerce_cielo_void_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Cielo or isn't
  // capture.
  if ($transaction->payment_method != 'cielo' || $transaction->remote_status != COMMERCE_PAYMENT_STATUS_SUCCESS) {
    return FALSE;
  }

  // Return FALSE if it is not the same day as the transaction was captured.
  if (time() - $transaction->created > 86400) {
    return FALSE;
  }

  // Allow access if the user can update payments on this order.
  return commerce_payment_transaction_access('update', $order, $transaction);
}


/**
 * Implements hook_menu().
 */
function commerce_cielo_menu() {
  $items = array();
  // Add a page for concluding the payment process after returning from Cielo.
  $items['checkout/%commerce_order/payment/cielo'] = array(
    'page callback' => 'commerce_cielo_redirect_back',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/commerce_cielo.router.inc',
  );

  // Add a menu item for capturing authorizations.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/cielo-capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_cielo_capture_form', 3, 5),
    'access callback' => 'commerce_cielo_capture_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_cielo.admin.inc',
  );

  // Add a menu item for voiding captured transactions.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/cielo-void'] = array(
    'title' => 'Void',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_cielo_void_form', 3, 5),
    'access callback' => 'commerce_cielo_void_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/cielo.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_cielo_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['cielo'] = array(
    'base' => 'commerce_cielo',
    'title' => t('Cielo'),
    'short_title' => t('Cielo Webservices'),
    'display_title' => t('By Credit or Debit Card.'),
    'description' => t("Integration with Cielo's webservice."),
  );

  return $payment_methods;
}


/**
 * Payment method callback: settings form.
 */
function commerce_cielo_settings_form($settings = NULL) {
  if (!libraries_get_path('brazilcards-lib')) {
    // Notify the user
    drupal_set_message(t('The Brazilcards Library could not be found or is not properly installed.'), 'error');
    return;
  }

  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'is_test' => 0,
      'credentials' => array(
        'affiliation' => '', // filiacao
        'token' => '', // chave
      ),
    'language' => 'EN',
    // Default == 2. Possible values are 0 == authentication only, 1 == authorize only if authenticaded,
    // 2 == authorize either authenticated or not, 3 == skip authentication and go straight to authorization.
    'authorization_type' => COMMERCE_CIELO_AUTHORIZE_EITHER_AUTHENTICATED_OR_NOT,
    'collect_card_details' => TRUE,
    'authenticate' => TRUE,
    // 3 for card issuer / 2 for merchant.
    'installments' => array(
      'creditor' => COMMERCE_CIELO_CREDITOR_ISSUER,
      'visa_max' => 18,
      'mastercard_max' => 18,
      'elo_max' => 18,
    ),
    'auto_capture' => TRUE,
  );

  $form['is_test'] = array(
    '#type' => 'radios',
    '#title' => t('Live / Sandbox'),
    '#description' => t('Define either if this is a Sandbox enviroment for testing out the webservice or a Live Production Webservice.'),
    '#options' => array(
      FALSE => t('Live Webservice - Real Transactions'),
      TRUE => t('Cielo Sandbox - Test enviroment'),
    ),
    '#ajax' => array(
      'callback' => 'commerce_cielo_credentials_ajax_callback',
      'wrapper' => 'credentials_wrapper',
    ),
    '#default_value' => $settings['is_test'],
  );

  // Setting an empty element with a wrapper to be populated.
  $form['credentials'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="credentials_wrapper">',
    '#suffix' => '</div>',
  );

  if (!$settings['is_test']) {
    $form['credentials'] = array(
      '#type' => 'fieldset',
      '#title' => t('Webservice Credentials at CIELO'),
      '#prefix' => '<div id="credentials_wrapper">',
      '#suffix' => '</div>',
    );

    $form['credentials']['affiliation'] = array(
      '#type' => 'textfield',
      '#title' => t('Affiliation ID'),
      '#description' => t('This value (filiacao) is provided by Cielo up on subscription.'),
      '#default_value' => $settings['credentials']['affiliation'],
      '#required' => TRUE,
    );

    $form['credentials']['token'] = array(
      '#type' => 'textfield',
      '#title' => t('Token Key'),
      '#description' => t('This value (chave) is provided by Cielo up on subscription.'),
      '#default_value' => $settings['credentials']['token'],
      '#required' => TRUE,
    );
  }

  $form['language'] = array(
    '#type' => 'select',
    '#title' => t('Language Interface'),
    '#description' => t('Set the language in which Cielo will provide its webservice responses as well as its user interface for when a client redirection to Cielo is required.'),
    '#options' => array(
      COMMERCE_CIELO_LANG_PT => t('Portuguese'),
      COMMERCE_CIELO_LANG_EN => t('English'),
      COMMERCE_CIELO_LANG_ES => t('Spanish'),
    ),
    '#default_value' => $settings['language'],
  );

  $form['auto_capture'] = array(
    '#type' => 'radios',
    '#title' => t('Auto Capture'),
    '#description' => t('Define whether or not to automatically capture the order total amount up on authorization granting.'),
    '#options' => array(
      FALSE => t('No, just request authorization. (requires manual or automated capture after checkout).'),
      TRUE => t('Yes, take every penny.'),
    ),
    '#default_value' => $settings['auto_capture'],
  );

  $form['authorization_type'] = array(
    '#type' => 'radios',
    '#title' => t('Authorization Mode'),
    '#description' => t('Define how the card holder authentication will be handled.'),
    '#options' => array(
      COMMERCE_CIELO_AUTHENTICATION_ONLY => t('Authentication only. (use this only if you know what you are doing.)'),
      COMMERCE_CIELO_AUTHORIZE_ONLY_IF_AUTHENTICATED => t('Authorize only if authenticaded'),
      COMMERCE_CIELO_AUTHORIZE_EITHER_AUTHENTICATED_OR_NOT => t('Authorize either authenticated or not'),
      COMMERCE_CIELO_SKIP_AUTHENTICATION => t('Skip authentication and go straight to authorization'),
    ),
    '#default_value' => $settings['authorization_type'],
  );

  // Added AJAX callback.
  $form['collect_card_details'] = array(
    '#type' => 'radios',
    '#title' => t('Where do buyers hand over their card details?'),
    '#options' => array(
      t('At Cielo. Buyers are redirected to Cielo\'s Website.'),
      t('At Merchant. Buyers enter their card details at the merchant\'s Website.'),
    ),
    '#ajax' => array(
      'callback' => 'commerce_cielo_collect_card_details_ajax_callback',
      'wrapper' => 'authenticate_wrapper',
    ),
    '#default_value' => $settings['collect_card_details'],
  );

  // Setting an empty element with a wrapper for ajax use.
  $form['authenticate'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="authenticate_wrapper">',
    '#suffix' => '</div>',
  );

  if ($settings['collect_card_details']) {
    $form['authenticate']['#type'] = 'select';
    $form['authenticate']['#title'] = t('Should the card holder be authenticated?');
    $form['authenticate']['#description'] = t('This applies on for when Credit card mode type is selected. For Debit cards this will be always YES. Define whether or not the card holder (buyer) will be prompted for card ownership verification.');
    $form['authenticate']['#options'] = array(
      FALSE => t('Nope.'),
      TRUE => t('Yes.'),
    );
    $form['authenticate']['#default_value'] = $settings['authenticate'];
  }

  $form['installments'] = array(
    '#type' => 'fieldset',
    '#title' => t('INSTALLMENT SETTINGS'),
    '#description' => t('These settings are ignored when the purchase order currency is other than BRL.'),
  );

  $form['installments']['creditor'] = array(
    '#type' => 'radios',
    '#title' => t('Creditor'),
    '#description' => t('Define who gives credit when payment term is based on installments.'),
    '#options' => array(
      COMMERCE_CIELO_CREDITOR_MERCHANT => t('Merchant is the creditor.'),
      COMMERCE_CIELO_CREDITOR_ISSUER => t('Card issuer / Cielo are the creditors.'),
    ),
    '#default_value' => $settings['installments']['creditor'],
  );

  // TODO: Validate input to make sure a numeric value has been entered.
  $form['installments']['visa_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Max number of installments for Visa'),
    '#description' => t('Defines the max number of installments that a buyer can select at the check out pane when paying with a Visa Credit Card.'),
    '#size' => 2,
    '#default_value' => $settings['installments']['visa_max'],
  );

  $form['installments']['mastercard_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Max number of installments for Mastercard'),
    '#description' => t('Defines the max number of installments that a buyer can select at the check out pane  when paying with a Marstercard Credit Card.'),
    '#size' => 2,
    '#default_value' => $settings['installments']['mastercard_max'],
  );

  $form['installments']['elo_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Max number of installments for Elo'),
    '#description' => t('Defines the max number of installments that a buyer can select at the check out pane when paying with a Elo Credit Card.'),
    '#size' => 2,
    '#default_value' => $settings['installments']['elo_max'],
  );

  return $form;
}


/**
 * AJAX callback for collect_card_details.
 */
function commerce_cielo_collect_card_details_ajax_callback($form, $form_state) {

  // Reconstruct markup.
  $form['authenticate'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="authenticate_wrapper">',
    '#suffix' => '</div>',
  );

  if ($form_state['values']['parameter']['payment_method']['settings']['payment_method']['settings']['collect_card_details']) {
      // Replace markup.
      $form['authenticate'] = array(
        '#type' => 'select',
        '#title' => t('Should the card holder be authenticated?'),
        '#description' => t('Define whether or not the card holder (buyer) will be prompted for card ownership verification.'),
        '#options' => array(
          FALSE => t('No.'),
          TRUE => t('Yes.'),
        ),
        '#prefix' => '<div id="authenticate_wrapper">',
        '#suffix' => '</div>',
      );
  }

  return $form['authenticate'];
}

/**
 * AJAX callback for collect_card_details.
 */
function commerce_cielo_credentials_ajax_callback($form, $form_state) {

  // Reconstruct markup
  $form['credentials'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="credentials_wrapper">',
    '#suffix' => '</div>',
  );

  if (!$form_state['values']['parameter']['payment_method']['settings']['payment_method']['settings']['is_test']) {
    // Reconstruct markup.
    $form['credentials'] = array(
      '#type' => 'fieldset',
      '#title' => t('Webservice Credentials at CIELO'),
      '#prefix' => '<div id="credentials_wrapper">',
      '#suffix' => '</div>',
    );
    $form['credentials']['affiliation'] = array(
      '#type' => 'textfield',
      '#title' => t('Affiliation ID'),
      '#description' => t('This value (filiacao) is provided by Cielo up on subscription.'),
      '#required' => TRUE,
    );

    $form['credentials']['token'] = array(
      '#type' => 'textfield',
      '#title' => t('Token Key'),
      '#description' => t('This value (chave) is provided by Cielo up on subscription.'),
      '#required' => TRUE,
    );
  }
  return $form['credentials'];
}

/**
 * Payment method callback: checkout form.
 */
function commerce_cielo_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  // Check if the external library (Brazilcards) is installed.
  if (!libraries_get_path('brazilcards-lib')) {
    // Log it to the system log.
    watchdog('commerce_cielo', 'The BrazilCards Library could not be found or is not properly installed.', array(), WATCHDOG_DEBUG);
    // Notify the user.
    drupal_set_message(t('Sorry for this but the checkout system is misconfigured, please report this to the website administrator.'), 'error');
    // Send the user to the home page.
    drupal_goto();
  }

  global $user;

  // Make sure the user is not anonymous.
  if (!in_array('authenticated user', $user->roles)) {

    drupal_set_message(t('Please, login to conclude your checkout payment process.'), 'warning');
    // Get the current url for redirecting the user back to the checkout review page after he/she logs in.
    $destination = drupal_get_destination();
    // Send the user to the login page.
    drupal_goto('user', array('query' => array('destination' => $destination['destination'])));
  }


  // Possible values for type are 1 == Credit Card or A == Debit Card.
  $type = COMMERCE_CIELO_CARD_CREDIT;
  if (isset($pane_values['payment_details']['credit_card']['type'])) {
    $type = $pane_values['payment_details']['credit_card']['type'];
  }

  // Default flag.
  $flag = COMMERCE_CIELO_FLAG_MASTERCARD;

  if (isset($pane_values['payment_details']['credit_card']['flag'])) {
    $flag = $pane_values['payment_details']['credit_card']['flag'];
  }

  if ($payment_method['settings']['collect_card_details']) {
    // The merchant is in charge of collecting the credit card details.
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

    if ($type == COMMERCE_CIELO_CARD_CREDIT) {
      // CVC field shows up on the form.
      $form = commerce_payment_credit_card_form(array('code' => '', ));
      // Attach a wrapper div to cvc field.
      $form['credit_card']['code']['#prefix'] = '<div id="credit-card_code_wrapper">';
      $form['credit_card']['code']['#suffix'] = '</div>';
    }
    else{
      // CVC doesn't show up when Debit Card option is/was selected.
      $form = commerce_payment_credit_card_form();
    }

  }

  $form['credit_card']['flag'] = array(
    '#type' => 'select',
    '#title' => t('Card Flag'),
    '#options' => array(
      COMMERCE_CIELO_FLAG_MASTERCARD => t('Mastercard'),
      COMMERCE_CIELO_FLAG_VISA => t('Visa'),
      COMMERCE_CIELO_FLAG_ELO => t('Elo'), ),
    '#weight' => -3,
    '#default_value' => $flag,
  );

  $form['credit_card']['type'] = array(
    '#type' => 'radios',
    '#title' => t('Card Type'),
    '#options' => array(
      COMMERCE_CIELO_CARD_CREDIT => t('Credit'),
      COMMERCE_CIELO_CARD_DEBIT => t('Debit')),
    '#weight' => -2,
    '#ajax' => array(
      'callback' => 'commerce_cielo_credit_card_type_ajax_callback',
    ),
    '#default_value' => $type,
  );

  // Make it hidden and set value to 1.
  $form['credit_card']['installments'] = array(
    '#type' => 'hidden',
    '#title' => t('Number of installments'),
    '#weight' => 0,
    '#default_value' => 1,
    '#prefix' => '<div id="credit-card_installments_wrapper">',
    '#suffix' => '</div>',
  );

  $currency_code = $order->commerce_order_total['und'][0]['currency_code'];

  if ($currency_code == 'BRL') {
    // Attach ajax callback function to allow updating of installment field.
    $form['credit_card']['type'] += array(
      '#ajax' => array(
        'callback' => 'commerce_cielo_credit_card_type_ajax_callback',
      ),
    );
    if ($type == 1) {
    // Add the installment field.

      // Attach ajax attributes to flag so it can update the max number of installments on the installment field.
      $form['credit_card']['flag'] += array(
        '#ajax' => array(
          'callback' => 'credit_card_flag_ajax_callback',
          'wrapper' => 'credit-card_installments_wrapper',
        ),
      );

      $maxInstallments = $payment_method['settings']['installments'][$flag . '_max'];

      $poTotal = $order->commerce_order_total['und'][0]['amount'];

      $form['credit_card']['installments'] = array(
        '#type' => 'select',
        '#title' => t('Number of installments'),
        '#options' => commerce_cielo_installment_options($poTotal, $maxInstallments),
        '#weight' => -1,
        '#default_value' => 1,
        '#prefix' => '<div id="credit-card_installments_wrapper">',
        '#suffix' => '</div>',
      );
    }
  }

  if ($payment_method['settings']['collect_card_details']) {

    $form['credit_card']['code'] = array(
      '#type' => 'textfield',
      '#title' => t('Security Code'),
      '#description' => t('Enter the 3 digits number located at the back of your card.'),
      '#size' => 3,
      '#prefix' => '<div id="credit-card_code_wrapper">',
      '#suffix' => '</div>',
    );

    if ($type == COMMERCE_CIELO_CARD_DEBIT) {
      $form['credit_card']['code']['#type'] = 'hidden';
      $form['credit_card']['code']['#required'] = FALSE;
    }
  }

  return $form;
}


/**
 * AJAX callback for calculating the max number of installments for the installment field.
 */
function credit_card_flag_ajax_callback($form, $form_state) {

  $currency = $form_state['order']->commerce_order_total['und'][0]['currency_code'];
  $type = $form_state['values']['commerce_payment']['payment_details']['credit_card']['type'];

  if ($currency == 'BRL' && $type == 1) {

    $flag = $form_state['values']['commerce_payment']['payment_details']['credit_card']['flag'];
    $maxInstallments = $form_state['order']->payment_methods['cielo|commerce_payment_cielo']['settings']['installments'][$flag . '_max'];
    $poTotal = $form_state['order']->commerce_order_total['und'][0]['amount'];

    $form['credit_card']['installments'] = array(
      '#type' => 'select',
      '#title' => t('Number of installments'),
      '#options' => commerce_cielo_installment_options($poTotal, $maxInstallments),
      '#weight' => -1,
      '#default_value' => 1,
      '#prefix' => '<div id="credit-card_installments_wrapper">',
      '#suffix' => '</div>',
    );

    return $form['credit_card']['installments'];
  }
}

/**
 * Helper function for gerenating a list of options for Installment field.
 *
 * Brazilian Real currency Only.
 */
function commerce_cielo_installment_options($poTotal, $maxInstallments) {
  for ($i=1; $i<=$maxInstallments; $i++) {
    if ($i == 1) {
      $options[$i] = t('Single pay out');
    }
    else{
      /**
       * TODO: Create a hook of something or perhaps add some fine-grained settings that allow
       *       interest rates to be applied on pre-set conditions.
       */
      $InstallmentAmount = number_format(($poTotal / 100) / $i, 2, ',', '.');
      $options[$i] = t('@parcelax @valor  |  with No interest', array('@parcela' => $i, '@valor' => $InstallmentAmount));
    }
  }
  return $options;
}

/**
 * AJAX callback for CVC and Installment fields.
 */
function commerce_cielo_credit_card_type_ajax_callback($form, $form_state) {
  // we need to send empty values to the BrazilCards library, so that is the why
  // these fields are being hidden instead of removed.
  $form['credit_card']['code'] = array(
    '#type' => 'hidden',
    '#prefix' => '<div id="credit-card_code_wrapper">',
    '#suffix' => '</div>',
  );

  $form['credit_card']['installments'] = array(
    '#type' => 'hidden',
    '#default_value' => 1,
    '#prefix' => '<div id="credit-card_installments_wrapper">',
    '#suffix' => '</div>',
  );

  $currency = $form_state['order']->commerce_order_total['und'][0]['currency_code'];
  $type = $form_state['values']['commerce_payment']['payment_details']['credit_card']['type'];

  if ($type == COMMERCE_CIELO_CARD_CREDIT) {
    // Reconstruct cvc field.
    $form['credit_card']['code'] = array(
      '#type' => 'textfield',
      '#title' => t('Security Code'),
      '#description' => t('Enter the 3 digits number located at the back of your card.'),
      '#size' => 3,
      '#prefix' => '<div id="credit-card_code_wrapper">',
      '#suffix' => '</div>',
    );

    if ($currency == 'BRL') {
      // Brazilian Real.
      $form['credit_card']['installments'] = array(
        '#type' => 'select',
        '#title' => t('Number of installments'),
        '#options' => $form['commerce_payment']['payment_details']['credit_card']['installments']['#options'],
        '#weight' => 0,
        '#default_value' => 1,
        '#prefix' => '<div id="credit-card_installments_wrapper">',
        '#suffix' => '</div>',
      );
    }
  }

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace("#credit-card_code_wrapper", render($form['credit_card']['code'])),
      ajax_command_replace("#credit-card_installments_wrapper", render($form['credit_card']['installments'])),
    ),
  );
}


/**
 * Payment method callback: checkout form validation.
 */
function commerce_cielo_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  if ($payment_method['settings']['collect_card_details']) {
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

    // Validate the credit card fields.
    $settings = array(
      'form_parents' => array_merge($form_parents, array('credit_card')),
    );

    // Check if this is a debit card
    if ($pane_values['credit_card']['type'] == COMMERCE_CIELO_CARD_DEBIT) {
      // Remove cvc field from being validated
      unset($pane_values['credit_card']['code']);
    }

    if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
      return FALSE;
    }
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_cielo_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {

  // Define whether or not the card holder ownership should be authenticated.
  $authenticate = !isset($payment_method['settings']['authenticate']) ? TRUE : $payment_method['settings']['authenticate'];

  if ($pane_values['credit_card']['type'] == COMMERCE_CIELO_CARD_DEBIT) {
    $payment_method['settings']['authorization_type'] = COMMERCE_CIELO_AUTHORIZE_ONLY_IF_AUTHENTICATED;
  }

  // Prepare the arguments to pass to the object instantiantion of the external library class.
  $arguments = commerce_cielo_get_arguments($payment_method, $order->order_number, $charge['amount']);

  // Attach the payment details for the authorize request.
  $arguments['payment'] = array(
    'CardFlag' => $pane_values['credit_card']['flag'],
    'Installments' => $pane_values['credit_card']['installments'],
    'Creditor' => $payment_method['settings']['installments']['creditor'],
    'CardType' => $pane_values['credit_card']['type'],
    'Authenticate' => $authenticate,
    'AuthorizationType' => $payment_method['settings']['authorization_type'],
    'AutoCapturer' => $payment_method['settings']['auto_capture'],
  );

  if ($payment_method['settings']['collect_card_details']) {
    // Attach the card details to the argument's array.
    $arguments['payment'] += array(
      'CardNumber' => $pane_values['credit_card']['number'],
      'ExpirationYear' => $pane_values['credit_card']['exp_year'],
      'ExpirationMonth' => $pane_values['credit_card']['exp_month'],
      'CVC' => $pane_values['credit_card']['code'],
    );
  }

  // Get the ISO 4217 info about all the enabled currencies.
  $currencies = commerce_currencies(TRUE);

  // Get the currency code formatted as 3 digits number. ie. 840 for USD.
  foreach ($currencies as $treeLetterCode => $value) {
    if ($treeLetterCode == $charge['currency_code']) {
      $currencyNumericCode = $value['numeric_code'];
      break;
    }
  }

  /// Instantiate the external library.
  $Cielo = new Cielo($arguments);

  if ($payment_method['settings']['is_test']) {
    setcookie('filiacao', $Cielo->membership['filiacao']);
    setcookie('chave', $Cielo->membership['chave']);
  }

  // Set currency code.
  $Cielo->setCurrency($currencyNumericCode);

  // Set language interface.
  $Cielo->setLanguage($payment_method['settings']['language']);

  // Set the url for returning from Cielo.
  $url = url('checkout/' . $order->order_number . '/payment/cielo', array('absolute' => TRUE));
  $Cielo->setReturnUrl($url);

  // Request Authorization.
  $Cielo->authorize();

  // Check for and save any warnings that might have been issued by the external library (Brazilcards).
  commerce_cielo_log_watch_dog($Cielo);

  // Prepare a transaction object to log the Webservice response.
  $transaction = commerce_payment_transaction_new('cielo', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];

  $remote_status = '';
  if (isset($Cielo->response['status']) && $Cielo->response['status'] == COMMERCE_CIELO_AUTHORIZED
      && !$payment_method['settings']['auto_capture']) {
    // Authorization has been granted and capturing will be done later at the store backend.
    $remote_status = 'authorization_only';
  }
  // Save the transaction.
  commerce_cielo_save_transaction($Cielo, $transaction, $authenticate, $remote_status);

   // Rebuilds the form if autorize transaction fails.
  if ($transaction->status == COMMERCE_PAYMENT_STATUS_FAILURE) {
    drupal_set_message(t('We received the following error processing your card. Please enter you information again or try a different card.'), 'error');
    drupal_set_message($transaction->message, 'error');
    return FALSE;
  }

  if (isset($Cielo->response['url-autenticacao'])) {
    // Send browser to Cielo for collecting card details and/or performing ownership authentication.
    drupal_goto($Cielo->response['url-autenticacao']);
  }

  /**
   * CAPTURING
   *
   * At this point there was no redirection, so we try to capture.
   *
   * We check if auto_capture is switched on and if there is a pending response
   * from the last call to the webservice.
   *
   */
  if ($payment_method['settings']['auto_capture'] && $transaction->status == COMMERCE_CIELO_AUTHORIZED) {
    // Try to capture.
    $Cielo->capture();

    // Check for and save any warnings that might have been issued by the external library (Brazilcards).
    commerce_cielo_log_watch_dog($Cielo);

    // Save the transaction.
    commerce_cielo_save_transaction($Cielo, $transaction, $authenticate);

    // Rebuilds the form if capture transaction fails.
    if ($transaction->status == COMMERCE_PAYMENT_STATUS_FAILURE) {
      drupal_set_message(t('We received the following error processing your card. Please enter you information again or try a different card.'), 'error');
      drupal_set_message($transaction->message, 'error');
      return FALSE;
    }
  }
}

/**
 * Define a status state based on the status code returned from de remote webservice.
 *
 * @param boolean $authenticate
 *     A admin setting option for whether or not the card holder
 *     ownership should had been authenticated.
 * @param string $status
 *     The status code returned from the remote server.
 * @return string $status_state
 *     One of the order states defined by commerce.
 *
 * Status code descriptions are
 * // PENDING
 * 0 == Transaction was created
 * 1 == In progress
 * 2 == Authenticated
 * 3 == Not Authenticated  // if authentication was not requested
 * 4 == Authorized or still to be Captured
 * 10 == Being Authenticated
 *
 * // SUCCESS
 * 6 == Captured
 *
 * // FAILURE
 * 3 == Not Authenticated  // if authentication was requested
 * 5 == Authorization was denied
 * 8 == Not Captured
 *
 *
 * // wont happen in this context.
 * 9 == Voided
 *
 */
function commerce_cielo_get_status_state($authenticate, $status) {
  if ($authenticate) {
    $pending = array(
      COMMERCE_CIELO_TRANSACTION_CREATED,
      COMMERCE_CIELO_IN_PROGRESS,
      COMMERCE_CIELO_AUTHENTICATED,
      COMMERCE_CIELO_AUTHORIZED,
      COMMERCE_CIELO_BEING_AUTHENTICATED,
    );
    $failure = array(
      // It has been explicit set that card holder must be authenticated.
      COMMERCE_CIELO_NOT_AUTHENTICATED,
      COMMERCE_CIELO_AUTHORIZATION_DENIED,
      COMMERCE_CIELO_NOT_CAPTURED,
    );
  }
  else{
    $pending = array(
      COMMERCE_CIELO_TRANSACTION_CREATED,
      COMMERCE_CIELO_IN_PROGRESS,
      COMMERCE_CIELO_AUTHENTICATED,
      // Even if authentication fails, it still might be possible to get an authorization and thereafter a capturing.
      COMMERCE_CIELO_NOT_AUTHENTICATED,
      COMMERCE_CIELO_AUTHORIZED,
      COMMERCE_CIELO_BEING_AUTHENTICATED,
    );
    $failure = array(
      COMMERCE_CIELO_AUTHORIZATION_DENIED,
      COMMERCE_CIELO_NOT_CAPTURED,
    );
  }

  $status_code = array(
    'PENDING' => $pending,
    'SUCCESS' => array(COMMERCE_CIELO_CAPTURED),
    'FAILURE' => $failure
  );

  // Set default value for when $status might come with an error code instead of a status code.
  $status_state = 'FAILURE';

  // Search for a match.
  foreach ($status_code as $state => $codes) {
    if (in_array($status, $codes)) {
      $status_state = $state;
      break;
    }
  }

  // Apply the constant value set by the payment module for the given state.
  switch ($status_state) {
    case 'PENDING':
      $status_state = COMMERCE_PAYMENT_STATUS_PENDING;
    break;
    case 'SUCCESS':
      $status_state = COMMERCE_PAYMENT_STATUS_SUCCESS;
    break;
    case 'FAILURE':
      $status_state = COMMERCE_PAYMENT_STATUS_FAILURE;
    break;
  }

  return $status_state;
}

/**
 * Saves the payment transaction after each call to the remote Webservice.
 *
 * @param object $Cielo
 *     The object from the external library class
 * @param object $transaction
 *     The payment transaction object
 * @param string $remote_status
 *     When no value is passed (default == empty) it will be automatically
 *     determined.
 *     The possible values for remote status are:
 *
 *     pending, failure or success (same as the transaction status)
 *
 *     or
 *
 *     redirected          - There was a redirection to Cielo
 *     authorization_only  - Transaction was successfully authorized and is awaiting for
 *                           manual capturing at the store backend.
 *
 */
function commerce_cielo_save_transaction($Cielo, $transaction, $authenticate, $remote_status = '') {
  $remote_id = '';
  if (isset($Cielo->response['tid'])) {
    $remote_id = check_plain($Cielo->response['tid']);
  }

  $status = '';
  $message = '';

  if (isset($Cielo->response['status'])) {
    // No transaction errors have occured.
    $status = check_plain($Cielo->response['status']);
    $message = t('Status Code: %code', array('%code' => $status));

    if (isset($Cielo->response['url-autenticacao'])) {
      $message .= t("<br />Waiting: Buyer was redirected to Cielo.");
      $remote_status = 'redirected';
    }

    foreach ($Cielo->response as $process => $values) {
      if (is_array($values)) {
        // Payment tab message.
        if (key_exists('mensagem', $values)) {
          // Assemble payment tab message.
          $message .= '<br />' . check_plain(t("$process: @message", array('@message' => check_plain($values['mensagem']))));
        }
      }
    }

  }
  elseif (isset($Cielo->response['codigo'])) {
    // The remote server reported an error.
    $status = check_plain($Cielo->response['codigo']);
    $message = t('Error Code: %code', array('%code' => $status));
    $message .= '<br />' . t('Error Message: %message', array('%message' => check_plain(t($Cielo->response['mensagem']))));
  }

  $transaction->remote_id = $remote_id;
  $transaction->remote_status = empty($remote_status) ? commerce_cielo_get_status_state($authenticate, $status) : $remote_status;
  $transaction->status = commerce_cielo_get_status_state($authenticate, $status);
  $transaction->message = $message;
  $transaction->payload[REQUEST_TIME] = $Cielo->response;

  // Save the transaction.
  commerce_payment_transaction_save($transaction);
}

/**
 * Helper function
 * It includes the external library class file and set the commom
 * arguments used for instantiating the webservice object.
 *
 * @param array $payment_method
 *     The payment settings array
 * @param string $order_number
 *     The order number
 * @param string $order_amaount
 *     The order amount
 *
 * @return array $arguments
 *     Array of commom arguments
 *
 */
function commerce_cielo_get_arguments($payment_method, $order_number, $order_amount) {
  // Include the external class file.
  include_once(drupal_realpath(libraries_get_path('brazilcards-lib')) . '/Cielo.class.php');

  if ($payment_method['settings']['is_test']) {
    // This is a test enviroment so we set the credentials empty.
    $payment_method['settings']['credentials']['affiliation'] = '';
    $payment_method['settings']['credentials']['token'] = '';
  }

  $arguments = array(
    'is_test' => $payment_method['settings']['is_test'],
    // These are the credentials for the production enviroment. They are ignored when 'is_test' == TRUE.
    'membership' => array(
      'filiacao' => $payment_method['settings']['credentials']['affiliation'],
      'chave' => $payment_method['settings']['credentials']['token'],
    ),
    // Purchase order details.
    'order' => array(
      'pedido' => $order_number,
      'TotalAmount' => $order_amount,
    ),
    'payment' => array(),
  );

  return $arguments;
}

/**
 * Check for warnings that might have been issued by the external library (Brazilcards)
 * and save them in to the watchdog log.
 *
 * @param object $Cielo
 *    The instantiated object from the external library class
 *
 */
function commerce_cielo_log_watch_dog($Cielo) {
  if (!empty($Cielo->warnings)) {
    // Record it in the watch dog log.
    watchdog('library_brazilcards', '<pre>' . $Cielo->warnings . '</pre>', array(), WATCHDOG_DEBUG);
    // Clear up the object property.
    $Cielo->warnings = array();
  }
}
