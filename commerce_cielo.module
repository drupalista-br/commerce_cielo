<?php
/**
 * @file
 * Implements Cielo's payment web service for use with Drupal Commerce.
 */

include_once 'includes/commerce_cielo.inc';

// Break it down into file blocks for better maintanance.
include_once 'commerce_cielo.admin.config.form.inc';
include_once 'commerce_cielo.checkout.form.inc';

/**
 * Define the payment transaction remote status.
 *
 * The user has been redirected to Cielo and the checkout is waiting him/her
 * to be redirected back for then concluding the checkout process.
 */
define('COMMERCE_CIELO_STATUS_REDIRECTED', 'redirected');

/**
 * Define the payment transaction remote status.
 *
 * The transaction was authorized but it is awaiting for the store administrator
 * to performe the funds capturing in a later time.
 */
define('COMMERCE_CIELO_STATUS_AUTHORIZED', 'authorization_only');

/**
 * Define the payment transaction remote status.
 *
 * The transaction has been denied but either has been approved, so the store
 * manager must try to capture the money manually.
 */
define('COMMERCE_CIELO_STATUS_NOT_CAPTURED', 'not_captured');

/**
 * Implements hook_permission().
 */
function commerce_cielo_permission() {
  return array(
    'administer commerce cielo' => array(
      'title' => t('Administer Commerce Cielo'),
    ),
    'capture commerce cielo' => array(
      'title' => t('Capture Commerce Cielo Payments'),
    ),
    'void commerce cielo' => array(
      'title' => t('Void Commerce Cielo Payments'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_cielo_menu() {
  $items = array();
  // Add a page for concluding the payment process after returning from Cielo.
  $items['checkout/%commerce_order/payment/cielo'] = array(
    'page callback' => 'commerce_cielo_redirect_back',
    'page arguments' => array(1),
    'access arguments' => array('access checkout'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/commerce_cielo.router.inc',
  );

  // Add a menu item for capturing authorizations.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/cielo-capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_cielo_capture_form', 3, 5),
    'access callback' => 'commerce_cielo_capture_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_cielo.admin.actions.inc',
  );

  // Add a menu item for voiding captured transactions.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/cielo-void'] = array(
    'title' => 'Void',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_cielo_void_form', 3, 5),
    'access callback' => 'commerce_cielo_void_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_cielo.admin.actions.inc',
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_cielo_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_cielo'] = array(
    'base' => 'commerce_cielo',
    'title' => t('Cielo'),
    'short_title' => t('Cielo Webservices'),
    'display_title' => t('By Credit or Debit Card.'),
    'description' => t("Integration with Cielo's webservice."),
  );
  return $payment_methods;
}

/**
 * Grants access to the prior authorization in order to capture it.
 *
 * @param Object $order
 *   The order the transaction is on.
 * @param Object $transaction
 *   The payment transaction object to be captured.
 *
 * @return boolean
 *   TRUE or FALSE indicating capture access.
 */
function commerce_cielo_capture_access($order, $transaction) {
  global $user;

  // Check if the transaction was done with Cielo and if it requires capturing.
  if ($transaction->payment_method != 'commerce_cielo') {
    return FALSE;
  }

  // Define whether or not this transaction needs to be captured.
  switch ($transaction->remote_status) {
    case COMMERCE_CIELO_STATUS_AUTHORIZED:
    case COMMERCE_CIELO_STATUS_NOT_CAPTURED:
      $needs_to_be_captured = TRUE;
      break;

    default:
      $needs_to_be_captured = FALSE;
      break;
  }

  // Check if it was done more than 5 days past the original authorization.
  if (REQUEST_TIME - $transaction->created > 86400 * 5) {
    return FALSE;
  }

  // Check if user has permission to capture and update payments on this order.
  if (user_access('capture commerce cielo')
      && commerce_payment_transaction_access('update', $transaction, $user)
      && $needs_to_be_captured) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Determines access to the payment cancelation form for Cielo Payment Method.
 *
 * @param Object $order
 *   The order the transaction is on.
 * @param Object $transaction
 *   The payment transaction object to be voided.
 *
 * @return boolean
 *   Whether or not the user is allowed to void the payment transaction.
 */
function commerce_cielo_void_access($order, $transaction) {
  global $user;

  // Return FALSE if the transaction isn't for Cielo or isn't
  // captured.
  if ($transaction->payment_method != 'commerce_cielo' ||
      $transaction->remote_status != COMMERCE_PAYMENT_STATUS_SUCCESS) {
    return FALSE;
  }

  // Return FALSE if it is not the same day as the transaction was captured.
  if (REQUEST_TIME - $transaction->created > 86400) {
    return FALSE;
  }

  // Check if user has permission to void and update payments on this order.
  if (user_access('void commerce cielo')
      && commerce_payment_transaction_access('update', $transaction, $user)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Generates the option range list for the installment field.
 *
 * @param float $po_total
 *   Total amount of the Purcharse Order.
 * @param int $max_installments
 *   The max number of installments.
 *
 * @return Array
 *   The number range of installment options.
 */
function _commerce_cielo_installment_options($po_total, $max_installments) {
  for ($option = 1; $option <= $max_installments; $option++) {
    if ($option == 1) {
      $options[$option] = t('Single pay out');
    }
    else {
      // TODO: Create a hook or something or perhaps add some fine-grained
      // settings that allow interest rates to be applied on pre-set conditions.
      $installment_amount = number_format(($po_total / 100) / $option, 2, ',', '.');
      $options[$option] = t('@parcelax @valor  |  with No interest', array('@parcela' => $option, '@valor' => $installment_amount));
    }
  }
  return $options;
}

/**
 * Define a status state based on the status code returned the webservice.
 *
 * @param boolean $authenticate
 *   A admin setting option for whether or not the card holder
 *   ownership should had been authenticated.
 * @param string $status
 *   The status code returned from the remote server.
 *
 * @return string
 *   One of the order states defined by commerce.
 *
 * Status code descriptions are
 * // PENDING
 * 0 == Transaction was created
 * 1 == In progress
 * 2 == Authenticated
 * 3 == Not Authenticated  // if authentication was not requested
 * 4 == Authorized or still to be Captured
 * 10 == Being Authenticated
 *
 * // SUCCESS
 * 6 == Captured
 *
 * // FAILURE
 * 3 == Not Authenticated  // if authentication was requested
 * 5 == Authorization was denied
 * 8 == Not Captured
 *
 *
 * // wont happen in this context.
 * 9 == Voided
 */
function _commerce_cielo_get_status_state($authenticate, $status) {
  if ($authenticate) {
    $pending = array(
      COMMERCE_CIELO_CREATED,
      COMMERCE_CIELO_IN_PROGRESS,
      COMMERCE_CIELO_AUTHENTICATED,
      COMMERCE_CIELO_AUTHORIZED,
      COMMERCE_CIELO_AUTHENTICATING,
    );
    $failure = array(
      // It has been explicit set that the card holder must be authenticated.
      COMMERCE_CIELO_NOT_AUTHENTICATED,
      COMMERCE_CIELO_NOT_AUTHORIZED,
      COMMERCE_CIELO_NOT_CAPTURED,
    );
  }
  else {
    $pending = array(
      COMMERCE_CIELO_CREATED,
      COMMERCE_CIELO_IN_PROGRESS,
      COMMERCE_CIELO_AUTHENTICATED,
      // Even if authentication fails, it still might be possible to get an
      // authorization and thereafter a capturing.
      COMMERCE_CIELO_NOT_AUTHENTICATED,
      COMMERCE_CIELO_AUTHORIZED,
      COMMERCE_CIELO_AUTHENTICATING,
    );
    $failure = array(
      COMMERCE_CIELO_NOT_AUTHORIZED,
      COMMERCE_CIELO_NOT_CAPTURED,
    );
  }

  $status_code = array(
    'PENDING' => $pending,
    'SUCCESS' => array(COMMERCE_CIELO_CAPTURED),
    'FAILURE' => $failure,
  );

  // Set default value for when $status might come with an error code instead of
  // a status code.
  $status_state = 'FAILURE';

  // Search for a match.
  foreach ($status_code as $state => $codes) {
    if (in_array($status, $codes)) {
      $status_state = $state;
      break;
    }
  }

  // Apply the constant value set by the payment module for the given state.
  switch ($status_state) {
    case 'PENDING':
      $status_state = COMMERCE_PAYMENT_STATUS_PENDING;
      break;

    case 'SUCCESS':
      $status_state = COMMERCE_PAYMENT_STATUS_SUCCESS;
      break;

    case 'FAILURE':
      $status_state = COMMERCE_PAYMENT_STATUS_FAILURE;
      break;
  }

  return $status_state;
}

/**
 * Saves the payment transaction after each call to the remote Webservice.
 *
 * @param object $response
 *   The response from Cielo webservice request
 * @param object $transaction
 *   The payment transaction object
 * @param Boolean $authenticate
 *   Whether or not the card holder shold be authenticated.
 * @param string $remote_status
 *   When no value is passed (default == empty) it will be automatically
 *   determined.
 *   The possible values for remote status are:
 *
 *   pending, failure or success (same as the transaction status) or
 *
 *   redirected          - There was a redirection to Cielo
 *   authorization_only  - Transaction was successfully authorized and is
 *                         awaiting for manual capturing at the store backend.
 */
function commerce_cielo_save_transaction($response, $transaction, $authenticate, $remote_status = '') {
  $remote_id = '';
  if (isset($response['tid'])) {
    $remote_id = check_plain($response['tid']);
  }

  $status = '';
  $message = '';

  if (isset($response['status'])) {
    // No transaction errors have occured.
    $status = check_plain($response['status']);
    $message = t('Status Code: %code', array('%code' => $status));

    if (isset($response['url-autenticacao'])) {
      $message .= '<br />' . t("Waiting: Buyer was redirected to Cielo.");
      $remote_status = COMMERCE_CIELO_STATUS_REDIRECTED;
    }

    foreach ($response as $process => $values) {
      if (is_array($values)) {
        // Payment tab message.
        if (key_exists('mensagem', $values)) {
          // Assemble payment tab message.
          $message .= '<br />' . format_string("@process: @message", array('@process' => $process, '@message' => $values['mensagem']));
        }
      }
    }
  }
  elseif (isset($response['codigo'])) {
    // The remote server reported an error.
    $status = check_plain($response['codigo']);
    $message = t('Error Code: @code', array('@code' => $status));
    $message .= '<br />' . t('Error Message: @message', array('@message' => $response['mensagem']));
  }

  $transaction->remote_id = $remote_id;
  $transaction->remote_status = empty($remote_status) ? _commerce_cielo_get_status_state($authenticate, $status) : $remote_status;
  $transaction->status = _commerce_cielo_get_status_state($authenticate, $status);
  $transaction->message = $message;
  $transaction->payload[REQUEST_TIME] = $response;

  // Save the transaction.
  commerce_payment_transaction_save($transaction);
}

/**
 * Includes external class and set the commom arguments used on instantiation.
 *
 * @param array $payment_method
 *   The payment settings array
 * @param string $order_number
 *   The order number
 * @param string $order_amount
 *   The order amount
 *
 * @return array
 *   Array of commom arguments
 */
function _commerce_cielo_get_arguments($payment_method, $order_number, $order_amount) {
  if ($payment_method['settings']['is_test']) {
    // This is a test enviroment so we set the credentials empty.
    $payment_method['settings']['credentials']['affiliation'] = '';
    $payment_method['settings']['credentials']['token'] = '';
  }

  $arguments = array(
    'is_test' => $payment_method['settings']['is_test'],
    // These are the credentials for the production enviroment. They are ignored
    // when 'is_test' == TRUE.
    'membership' => array(
      'filiacao' => $payment_method['settings']['credentials']['affiliation'],
      'chave' => $payment_method['settings']['credentials']['token'],
    ),
    // Purchase order details.
    'order' => array(
      'pedido' => $order_number,
      'TotalAmount' => $order_amount,
    ),
    'payment' => array(),
  );

  return $arguments;
}

/**
 * Define the remote status based on the status code sent by the remote service.
 *
 * @param Object $response
 *   The Cielo Webservice Object.
 * @param Boolean $auto_capture
 *   Whether or not the payment transaction was set to be captured right
 *   after authorization or in a later time by the store manager.
 *
 * @return String
 *   The remote status which is either 'not captured' or 'authorized_only'.
 */
function _commerce_cielo_get_remote_status($response, $auto_capture) {
  // Default it to empty.
  $remote_status = '';
  if (isset($response['status'])) {
    if ($auto_capture == 'true') {
      // Check if remote_status requires later capturing attempt.
      switch ($response['status']) {
        case COMMERCE_CIELO_IN_PROGRESS:
        case COMMERCE_CIELO_AUTHENTICATING:
        case COMMERCE_CIELO_AUTHENTICATED:
          // The transaction hasn't been denied but either hasn't been
          // approved, so the store manager must try to capture the money
          // manually.
          $remote_status = COMMERCE_CIELO_STATUS_NOT_CAPTURED;
          break;
      }
    }
    else {
      if ($response['status'] == COMMERCE_CIELO_AUTHORIZED) {
        // auto_capture was set to FALSE and the transaction was authorized.
        $remote_status = COMMERCE_CIELO_STATUS_AUTHORIZED;
      }
    }
  }
  return $remote_status;
}

function commerce_cielo_card_types($debit = FALSE) {
  if ($debit) {
    // Only Visa and MasterCard support debit.
    return array(
      COMMERCE_CIELO_CARD_VISA => t('Visa'),
      COMMERCE_CIELO_CARD_MASTERCARD => t('MasterCard'),
    );
  }

  return array(
    COMMERCE_CIELO_CARD_VISA => t('Visa'),
    COMMERCE_CIELO_CARD_MASTERCARD => t('MasterCard'),
    COMMERCE_CIELO_CARD_DINERS => t('Diners Club'),
    COMMERCE_CIELO_CARD_DISCOVER => t('discover'),
    COMMERCE_CIELO_CARD_ELO => t('Elo'),
    COMMERCE_CIELO_CARD_AMEX => t('American Express'),
    COMMERCE_CIELO_CARD_JCB => t('JCB'),
    COMMERCE_CIELO_CARD_AURA => t('Aura'),
  );
}

/**
 * Callback function for applying the t() function on the values of an array.
 *
 * @param array $array
 *   The array that needs its values to be translatable.
 *
 * @return array
 *   The same array that came in but with its values wrapped in t().
 */
function commerce_cielo_t($array) {
  foreach ($array as $key => $value) {
    $array[$key] = t($value);
  }
  return $array;
}
